To compile and run this code, please create a new Eclipse project from an existing directory (Project3).

The project can then be launched through eclipse with the Main.java class found in course.oop.application.

Some notes about the runtime behavior and the behavior of the classes that are implemented:
	Custom runtime exceptions have been implemented. These are as follows and will be thrown if input to the object is provided when the object is not in a valid state:
		InvalidAIOperation
			occurs when an AI attempts to make a move with a coordinate specified (an AI should make a random move)
		InvalidPersonOperation
			occurs when a person attempts to make a move with no coordinate specified
		GameInProgressException
			occurs when a user attempts to create a new player when a game is in progress
		GameNotInProgressException
			occurs when a move is attempted and the game is not in progress (i.e. it has been quit, resulted in a victory, or resulted in a draw)
		InvalidMarkerException
			occurs when an invalid player marker is provided for a player object. often occurs when the marker is more than 1 character long
		TurnTimeoutException
			is thrown when a user takes too long to supply input to the program when it is their turn
	All features from the previous iteration have been implemented, and the user interface has been designed such that it is very intuitive and easy to use.
	Any player that is input to the program will be available for future use. I accomplished this through serialization. This serialization was implemented with a wrapper class that contained a map of Player objects. This Map is serialized and stored in the root as players.ser. Delete this file if you would like to start with a fresh set of Players.