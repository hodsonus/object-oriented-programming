package course.oop.other;

public class BottomBoard extends Board<Square> {
	
    public BottomBoard() {
    	resetBoard();
    }

	@Override
	public boolean attemptMove(Player player, Pair move) {
		if (!(move instanceof OnePair)) throw new IllegalArgumentException("Move must be an instance of OnePair, only one grid is viable at this depth.");
		
		OnePair currDepthMove = (OnePair)move;
		
		int row, col;
		row = currDepthMove.row;
		col = currDepthMove.col;

		return grid[row][col].setPlayerOccupation(player);
	}
	
	@Override
	public String draw() {
		return toString();
	}
	
	@Override
	public String toString() {
		StringBuilder drawing = new StringBuilder("      |     |     \n   ");
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[i].length; j++) {
				drawing.append(grid[i][j].toString());
				if (j != grid[i].length-1) {
					drawing.append("  |  ");
				}
			}
			
			if (i != grid.length-1) {
				drawing.append("\n _____|_____|_____\n      |     |     \n   ");
			}
		}
		drawing.append("\n      |     |    \n");
		return drawing.toString();
	}
	
	@Override
	public void resetBoard() {
    	grid = new Square[3][3];
    	for (int i = 0; i < grid.length; i++) {
    		for (int j = 0; j < grid[i].length; j++) {
    			grid[i][j] = new Square();
    		}
    	}
	}

	@Override
	public GameStatus updateStatus(Pair lastMove) {
		OnePair move = (OnePair)(lastMove);
		
		//TODO
		return null;
	}
}