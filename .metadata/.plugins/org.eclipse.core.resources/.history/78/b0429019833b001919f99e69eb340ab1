package course.oop.other;

public class BasicTicTacToe extends TicTacToe<BottomBoard> {

    public BasicTicTacToe() {
    	board = new BottomBoard();
    }

    @Override
    public String getRules() {
        return "**************************************** RULES ****************************************\n" + 
        	   "Tic-tac-toe is a paper-and-pencil game for two players, X and O, who take" + 
        	   "turns marking the spaces in a 3Ã—3 grid. The player who succeeds in placing three of" + 
        	   "their marks in a horizontal, vertical, or diagonal row wins the game.";
    }

	@Override
	public boolean attemptMove(Player currentPlayerObj, Pair pair) {
		return board.attemptMove(currentPlayerObj, pair);
	}

	@Override
	public boolean attemptMove(Player currentPlayerObj) {
		int row = 1;//TODO
		int col = 1;
		return board.attemptMove(currentPlayerObj, new OnePair(row, col));
	}

	@Override
	protected void initBoard() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String getDisplay() {
		return board.toString();
	} 
	
	public static int randInt(int min, int max) {

	    // NOTE: This will (intentionally) not run as written so that folks
	    // copy-pasting have to think about how to initialize their
	    // Random instance.  Initialization of the Random instance is outside
	    // the main scope of the question, but some decent options are to have
	    // a field that is initialized once and then re-used as needed or to
	    // use ThreadLocalRandom (if using at least Java 1.7).
	    // 
	    // In particular, do NOT do 'Random rand = new Random()' here or you
	    // will get not very good / not very random results.
	    Random rand;

	    // nextInt is normally exclusive of the top value,
	    // so add 1 to make it inclusive
	    int randomNum = rand.nextInt((max - min) + 1) + min;

	    return min + (int)(Math.random() * ((max - min) + 1))
	}
}