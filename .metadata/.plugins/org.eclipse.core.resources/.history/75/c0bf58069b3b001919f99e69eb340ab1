package course.oop.other;

import java.util.List;

public abstract class Board<T> {

    public Board() {
    	nextPos = null;
    }

    protected T[][] grid;    
    protected OnePair nextPos;
    protected GameStatus status;

    
	public GameStatus updateStatus(Pair lastMove) {
		OnePair move = (OnePair)(lastMove);
		//check THIS row
		
		//check THIS column
		
		//check THIS diagonal ()
		
		//TODO
		return null;
	}
	
    protected List<OnePair> getRow(OnePair pair) {
		if (RowColDia.rowA.contains(pair)) return RowColDia.rowA;
		else if (RowColDia.rowB.contains(pair)) return RowColDia.rowB;
		else if (RowColDia.rowC.contains(pair)) return RowColDia.rowC;
		return null; // this should NEVER happen. null pointer exceptions here imply something else is VERY wrong with the state elsewhere
    }
	
    protected List<OnePair> getCol(OnePair pair) {
		if (RowColDia.colA.contains(pair)) return RowColDia.colA;
		else if (RowColDia.colB.contains(pair)) return RowColDia.colB;
		else if (RowColDia.colC.contains(pair)) return RowColDia.colC;
		return null; // this should NEVER happen. null pointer exceptions here imply something else is VERY wrong with the state elsewhere
    }
	
    protected List<List<OnePair>> getDia(OnePair pair) {
    	// the return list
		if (RowColDia.diagA.contains(pair)) return null;
		else if (RowColDia.diagB.contains(pair)) return null;
		return diagList;
    }
    
    public abstract String draw();
	public abstract void resetBoard();
	public abstract boolean attemptMove(Player player, Pair move);
}